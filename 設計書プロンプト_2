## 🔧 Copilot・LLM設計書自動化プロンプトテンプレート（完全版 / Markdown形式）

---

# 📘 技術設計書生成プロンプト for VS Code Copilot & LLM分割対応

Python / SQLAlchemy / React / AWS ベースのクラウドネイティブアプリに対して、現在開いているファイルおよび最近変更・追加されたファイルをもとに、以下のテンプレートに従って技術設計書を構築してください。

## ✅ 分割処理に関する注意

- **各章は独立して解析・生成できるよう構成されています。**
- ファイル数や変更量が多い場合は、**1～3章ずつ分割出力**してください。
- `---` セクション区切りは LLM にとっての**明示的な区切り指示**になります。

---

## 1. 技術概要

### 1.1 実装機能の技術的概要
- 100～200語程度で、技術的視点から実装機能の概要を記述
- アーキテクチャ、関連するモジュール、技術的意図を含める

---

## 2. コード変更の分析

### 2.1 主要な変更点
- ソースコードの主な追加・変更内容を要約
- 特に影響の大きいロジックやインターフェース変更を中心に記述

### 2.2 対象ファイル一覧
- 変更・追加・削除されたファイル名をリストアップ
- 必要に応じてディレクトリ構造も記載

---

## 3. データ構造と型

### 3.1 新規定義されたクラス・型
- Entity、DTO、Enum、Interfaceなどの構造を説明

### 3.2 データフロー上の役割
- 各構造がシステム内で果たす役割を記述

---

## 4. API設計（該当する場合）

### 4.1 新規エンドポイント一覧
- パス、メソッド、目的、認証の有無、想定レスポンスを表形式で記載

### 4.2 入出力スキーマ
- PydanticやJSON Schema形式に準じた構造体を記述

---

## 5. ビジネスロジックとユースケース

### 5.1 処理の全体フロー
- ステップバイステップで、処理の流れを図解または箇条書きで説明

### 5.2 例外処理・バリデーション
- 例外が発生する条件や、その制御方法

---

## 6. UI設計（該当する場合）

### 6.1 UI構成要素
- 主要なReactコンポーネントやUIライブラリとの関係

### 6.2 ユーザー操作フロー
- 画面遷移やイベント駆動の流れを記述

---

## 7. 状態管理・非同期処理

### 7.1 状態管理戦略
- Redux, Recoil, useState/useReducer などの使用箇所と管理方針

### 7.2 API通信・非同期処理
- useEffect / useSWR / React Query / Axios 等の利用方法を整理

---

## 8. セキュリティ・認証

### 8.1 認証方式とスコープ
- JWT/OAuth/SAMLなど、採用している方式の概要

### 8.2 入力バリデーションとXSS/CSRF対策
- バリデーション箇所とその方式、サニタイズ処理の有無

---

## 9. テスト戦略

### 9.1 テストカバレッジと対象
- 単体／結合／E2E 各テストの実施内容、使用フレームワーク

### 9.2 モック・スタブの使用
- DB / 外部API などのモック戦略

---

## 10. CI/CDとデプロイ構成

### 10.1 GitHub Actions / Pipeline構成
- ジョブの構造、トリガー条件、キャッシュ戦略

### 10.2 インフラ設定と環境分離
- ステージング／本番などの切り替え方法、Secrets管理

---

## 11. ログ・モニタリング戦略

### 11.1 ログ出力ポリシー
- 構造化ログの有無、出力レベルの管理方針

### 11.2 監視ツールとの連携
- Datadog, CloudWatch, Sentryなどとの統合

---

## 12. まとめと開発者向け注意点

### 12.1 技術設計の要点
- この実装での設計選択・技術的な意図を要約してください

### 12.2 開発者向け注意点
- このコードの理解やメンテナンスの際に、開発者が特に注意すべき前提・制約・設計上の癖などを記述してください

---

## 🧩 13. 技術的な課題と運用上の注意点（NEW）

### 13.1 実装上の課題・改善余地
- スプリントの要求を満たしているかどうかに関係なく、以下の観点で技術的負債や設計上の懸念点を挙げてください：
  - 保守性・拡張性
  - セキュリティ
  - テストしやすさ
  - パフォーマンス

### 13.2 運用・デプロイ後の懸念
- 本番運用時に発生しうる以下の観点での懸念点を記載：
  - 例外・障害時の挙動
  - モニタリングしづらい構造
  - ユーザー入力への過敏さ
  - データ移行・バージョン管理の懸念

---

## 📤 出力フォーマット

- 各章は `##` セクションで Markdown 形式に準拠して出力
- 各小見出し（`###`）は章内で展開されるトピックに対応
- 長文になる場合はセクション単位で **出力を分割**
- 出力はファイルに保存しやすい Markdown としてフォーマットすること

---
